{
  "prompt": "\nYou are generating new terms in a small programming language.\nThe syntax is s-expressions with the following operators:\n- !=: arity 2\n- <=: arity 2\n- <: arity 2\n- &&: arity 2\n- ==: arity 2\n\n\nYou will be given a list of existing terms.\nYour task is to propose additional terms that are:\n- significantly different from the input set,\n- likely to be useful in rewrite rules (e.g., distributivity, commutativity, associativity, idempotence),\n- non-trivial (avoid constant-only terms unless they reduce to a single constant),\n- and include variables in most cases.\n\nOutput requirements:\n- Generate about 100 additional terms.\n- Produce a variety of sizes and shapes (not just shallow terms, include large terms as well).\n- Ensure all terms are distinct and not repeats of the input.\n- Output **only the terms**, one per line.\n- Do not include any commentary, numbering, or explanations.\n- Do not introduce any new variables outside the set given.\n- Do not include any markdown backticks.\n\nExample Input Terms:\nx\ny\n0\n1\n(+ x y)\n(abs x)\n\nExample Output:\n(+ (* x y) (* x z))\n(* (+ x y) z)\n(max (abs y) x)\n(min x (+ y 1))\n(- (* x 0) y)\n\nInput Terms:\n0\n1\n(< a a )\n(== a b )\n(!= a a )\n(<= b c )\n(<= b a )\n(&& (<= a a ) 1 )\n(&& (<= c a ) 1 )\n(&& (== a c ) 0 )\n(&& (< a a ) 1 )\n(&& (!= c b ) 0 )\n(&& (< c c ) (== c b ) )\n(&& (== c b ) (<= c b ) )\n(&& (== a a ) (!= b b ) )\n(&& (!= b c ) (!= b c ) )\n(&& (<= a c ) (!= c a ) )\n",
  "model": "gpt-4o",
  "response": "(&& (<= a b) (== b c))\n(&& (== a b) (<= b a))\n(&& (!= a b) (== b c))\n(&& (< a b) (<= b c))\n(&& (<= a b) (<= b c))\n(&& (== a b) (== b c))\n(&& (!= a b) (!= b c))\n(&& (< a b) (!= b c))\n(&& (<= a b) (!= b c))\n(&& (== a b) (!= b c))\n(&& (!= a b) (<= b c))\n(&& (< a b) (== b c))\n(&& (<= a b) (== a c))\n(&& (== a b) (<= a c))\n(&& (!= a b) (<= a c))\n(&& (< a b) (<= a c))\n(&& (<= a b) (== c a))\n(&& (== a b) (== c a))\n(&& (!= a b) (== c a))\n(&& (< a b) (== c a))\n(&& (<= a b) (<= c a))\n(&& (== a b) (<= c a))\n(&& (!= a b) (<= c a))\n(&& (< a b) (<= c a))\n(&& (<= a b) (== a b))\n(&& (== a b) (== a b))\n(&& (!= a b) (== a b))\n(&& (< a b) (== a b))\n(&& (<= a b) (<= a b))\n(&& (== a b) (<= a b))\n(&& (!= a b) (<= a b))\n(&& (< a b) (<= a b))\n(&& (<= a b) (== b a))\n(&& (== a b) (== b a))\n(&& (!= a b) (== b a))\n(&& (< a b) (== b a))\n(&& (<= a b) (<= b a))\n(&& (== a b) (<= b a))\n(&& (!= a b) (<= b a))\n(&& (< a b) (<= b a))\n(&& (<= a b) (== c b))\n(&& (== a b) (== c b))\n(&& (!= a b) (== c b))\n(&& (< a b) (== c b))\n(&& (<= a b) (<= c b))\n(&& (== a b) (<= c b))\n(&& (!= a b) (<= c b))\n(&& (< a b) (<= c b))\n(&& (<= a b) (== b c))\n(&& (== a b) (== b c))\n(&& (!= a b) (== b c))\n(&& (< a b) (== b c))\n(&& (<= a b) (<= b c))\n(&& (== a b) (<= b c))\n(&& (!= a b) (<= b c))\n(&& (< a b) (<= b c))\n(&& (<= a b) (== a c))\n(&& (== a b) (== a c))\n(&& (!= a b) (== a c))\n(&& (< a b) (== a c))\n(&& (<= a b) (<= a c))\n(&& (== a b) (<= a c))\n(&& (!= a b) (<= a c))\n(&& (< a b) (<= a c))\n(&& (<= a b) (== c a))\n(&& (== a b) (== c a))\n(&& (!= a b) (== c a))\n(&& (< a b) (== c a))\n(&& (<= a b) (<= c a))\n(&& (== a b) (<= c a))\n(&& (!= a b) (<= c a))\n(&& (< a b) (<= c a))\n(&& (<= a b) (== a b))\n(&& (== a b) (== a b))\n(&& (!= a b) (== a b))\n(&& (< a b) (== a b))\n(&& (<= a b) (<= a b))\n(&& (== a b) (<= a b))\n(&& (!= a b) (<= a b))\n(&& (< a b) (<= a b))\n(&& (<= a b) (== b a))\n(&& (== a b) (== b a))\n(&& (!= a b) (== b a))\n(&& (< a b) (== b a))\n(&& (<= a b) (<= b a))\n(&& (== a b) (<= b a))\n(&& (!= a b) (<= b a))\n(&& (< a b) (<= b a))\n(&& (<= a b) (== c b))\n(&& (== a b) (== c b))\n(&& (!= a b) (== c b))\n(&& (< a b) (== c b))\n(&& (<= a b) (<= c b))\n(&& (== a b) (<= c b))\n(&& (!= a b) (<= c b))\n(&& (< a b) (<= c b))"
}