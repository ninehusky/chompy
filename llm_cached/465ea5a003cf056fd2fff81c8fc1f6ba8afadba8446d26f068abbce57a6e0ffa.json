{
  "prompt": "\nYou are generating new terms in a small programming language.\nThe syntax is s-expressions with the following operators:\n- !=: arity 2\n- <=: arity 2\n- <: arity 2\n- ==: arity 2\n\n\nYou will be given a list of existing terms.\nYour task is to propose additional terms that are:\n- significantly different from the input set,\n- likely to be useful in rewrite rules (e.g., distributivity, commutativity, associativity, idempotence),\n- non-trivial (avoid constant-only terms unless they reduce to a single constant),\n- and include variables in most cases.\n\nOutput requirements:\n- Generate about {term_limit} additional terms.\n- Produce a variety of sizes and shapes (not just shallow terms, include large terms as well).\n- Ensure all terms are distinct and not repeats of the input.\n- Output **only the terms**, one per line.\n- Do not include any commentary, numbering, or explanations.\n- Do not introduce any new variables outside the set given.\n- Do not include any markdown backticks.\n\nExample Input Terms:\nx\ny\n0\n1\n(+ x y)\n(abs x)\n\nExample Output:\n(+ (* x y) (* x z))\n(* (+ x y) z)\n(max (abs y) x)\n(min x (+ y 1))\n(- (* x 0) y)\n\nInput Terms:\na\nb\nc\n(- c )\n(- a )\n(- b )\n(* a a )\n(+ a b )\n(* 0 c )\n(+ c 0 )\n(+ b c )\n(- (- a ) )\n(- (- b ) )\n(- (- c ) )\n(- (- a 1 ) )\n(- (+ c 0 ) )\n(- 1 (- a ) )\n(* (- 0 ) b )\n(- (* b 1 ) )\n(/ 1 (- a c ) )\n(- a (/ a 1 ) )\n(/ (- b 0 ) a )\n(* (+ a b ) 0 )\n(- (* a 1 ) b )\n(- (/ c (- c ) ) )\n(+ 0 (- (- c ) ) )\n(- (- (- 0 ) ) b )\n(- (- (/ a a ) ) )\n(- (* 0 (- c ) ) )\n(- (- (- (- b ) ) ) )\n(- (- (- (- a ) ) ) )\n(- (- (- (- c ) ) ) )\n",
  "model": "gpt-4o",
  "response": "(* a (+ b c))\n(- (* a b) c)\n(== a (+ b c))\n(!= (* a b) c)\n(<= (+ a b) c)\n(< a (* b c))\n(== (- a b) c)\n(!= a (- b c))\n(<= (* a b) c)\n(< a (+ b c))\n(== (+ a b) (* c a))\n(!= (- a b) (* c a))\n(<= (* a b) (+ c a))\n(< a (- b c))\n(== (* a b) (- c a))\n(!= a (+ b c))\n(<= (- a b) (* c a))\n(< a (* b c))\n(== (+ a b) (- c a))\n(!= (* a b) (+ c a))\n(<= a (- b c))\n(< (* a b) c)"
}